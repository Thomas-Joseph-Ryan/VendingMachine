/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package CC12.Richard.Group1.Assign2;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Scanner;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    static ItemDao itemDao;
    static UserDao userDao;
    static DenomDao denomDao;
    static HistoryDao historyDao;

    static String url = "jdbc:sqlite:src/test/resources/Vendor.db";

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();

    private final PrintStream originalOut = System.out;
    private final InputStream originalIn = System.in;
    private final PrintStream originalErr = System.err;
    //to test if table is created
    @BeforeAll
    static void CreateDatabase() {
        AppTest.itemDao = new ItemDao(url);
        AppTest.userDao = new UserDao(url);
        AppTest.denomDao = new DenomDao(url);
        AppTest.historyDao = new HistoryDao(url);
    }

    @BeforeEach
    void CreateTables() {

        System.setOut(new PrintStream(outContent));

        System.setErr(new PrintStream(errContent));

        itemDao.createProductsTable();
        itemDao.insertDefaultProductsValues();

        historyDao.createHistoryTable();

        userDao.createUsersTable();
        userDao.insertDefaultUsersValues();

        denomDao.createDenomTable();
        denomDao.insertDefaultDenomValues();

        historyDao.createTransactionTable();

        historyDao.createCancelledTransactionTable();
    }

    @AfterEach
    void DestroyDB() {
        System.setOut(originalOut);
        System.setErr(originalErr);
        itemDao.dropTables();
    }


    // check if functions correctly initialize tables
    @Test
    void InitializingTest(){
        assertEquals(itemDao.count("name","products"),16);
        assertEquals(itemDao.count("ProductName","History"),0);
        assertEquals(userDao.count("username","Users"),3);
        assertEquals(denomDao.count("Denomination","Denomination"),11);
    }

    @Test
    void insertToTableTest(){

        //Products Table
        assertEquals(itemDao.count("name","products"),16);
        itemDao.insertToProductsTable("1005","Burger","10","4","0");
        assertEquals(itemDao.count("name","products"),17);

        //History Table
        assertEquals(historyDao.count("ProductName","History"),0);
        historyDao.insertToHistoryTable("1001","M&M","2","random");
        assertEquals(historyDao.count("ProductName","History"),1);
        
        //Users Table
        assertEquals(userDao.count("username","Users"),3);
        UserDao.insertToUsersTable("random","random","NULL","NULL","NULL");
        assertEquals(userDao.count("username","Users"),4);

        //Denom Table

        assertEquals(denomDao.count("Denomination","Denomination"),11);
        DenomDao.insertToDenomTable(100.0,"4");

        assertEquals(denomDao.count("Denomination","Denomination"),11);

        DenomDao.insertToDenomTable(100.0,"4");

        denomDao.insertToDenomTable(100.0,"4");

        assertEquals(denomDao.count("Denomination","Denomination"),11);

    }

    @Test
    void getDenomQuantityTest(){
        assertEquals(denomDao.getDenomQuantity("50"),5);
        DenomDao.setDenomQuantity("50","6");
        assertEquals(denomDao.getDenomQuantity("50"),6);
    }

    @Test
    void viewHistoryTest(){
        ArrayList<History> tempHistory = new ArrayList<>();
        tempHistory = HistoryDao.viewHistoryByUserName("random");
        assertEquals(tempHistory.size(),0);

        // only returns 5 and checks if correctly returns by username
        historyDao.insertToHistoryTable("1001","burger","2","random");
        historyDao.insertToHistoryTable("1001","fries","2","random");
        historyDao.insertToHistoryTable("1001","nuggets","2","random");
        historyDao.insertToHistoryTable("1001","coke","2","random");
        historyDao.insertToHistoryTable("1001","mask","2","random");
        historyDao.insertToHistoryTable("1001","mentos","2","random");
        historyDao.insertToHistoryTable("1001","bounty","2","random_2");
        tempHistory = HistoryDao.viewHistoryByUserName("random");
        assertEquals(tempHistory.size(),5);
        String lastFifthProduct = tempHistory.get(tempHistory.size()-1).getProduct();
        String lastProduct = tempHistory.get(0).getProduct();
        assertEquals(lastFifthProduct,"fries");
        assertEquals(lastProduct,"mentos");

        // checks if last product is correct by other user
        tempHistory = HistoryDao.viewHistoryByUserName("random_2");
        lastProduct = tempHistory.get(0).getProduct();
        assertEquals(lastProduct,"bounty");
        
    }

    @Test
    void setProductQuantityTest(){
        assertEquals(itemDao.getProductQuantity("M&M"),7);
        ItemDao.setProductQuantity("M&M","5");
        assertEquals(itemDao.getProductQuantity("M&M"),5);

        //getting a product quantity that does not exist
        assertEquals(itemDao.getProductQuantity("Bottle"),-1);

    }

    @Test
    void setUserRoleTest(){
        UserDao.insertToUsersTable("guest","customer","123","NULL","NULL");
        assertEquals(userDao.getUserRole("guest"),"customer");
        userDao.setUserRole("guest","cashier");
        assertEquals(userDao.getUserRole("guest"),"cashier");

    }

    @Test
    void checkUserNameTest(){
        assertFalse(UserDao.checkIfUsernameAlreadyExists("guest"));
        assertTrue(UserDao.checkIfUsernameAlreadyExists("seller"));

    }

    @Test
    void GiveChangeTest(){
        // returns a list of denoms and quantity used
        ArrayList<Denom> ret;
        ArrayList<Denom> given = new ArrayList<>();
        Denom fifties = new Denom();
        fifties.setDenom(50.0);
        fifties.incrementQtyInUse();
        given.add(fifties);
        ret = DenomDao.giveChange(given, 55.35);

        int i = 0;


        while (i < ret.size()){
            if (ret.get(i).getDenom() == 50.0){
                assertEquals(ret.get(i).getQuantity(),1);

            }else if (ret.get(i).getDenom() == 20.0){
                assertEquals(ret.get(i).getQuantity(),0);
            
            }else if (ret.get(i).getDenom() == 10.0){
                assertEquals(ret.get(i).getQuantity(),0);
            
            }else if (ret.get(i).getDenom() == 5.0){
                assertEquals(ret.get(i).getQuantity(),1);
            
            }else if (ret.get(i).getDenom() == 2.0){
                assertEquals(ret.get(i).getQuantity(),0);
            
            }else if (ret.get(i).getDenom() == 1.0){
                assertEquals(ret.get(i).getQuantity(),0);
            
            }else if (ret.get(i).getDenom() == 0.5){
                assertEquals(ret.get(i).getQuantity(),0);
            
            }else if (ret.get(i).getDenom() == 0.2){
                assertEquals(ret.get(i).getQuantity(),1);
            
            }else if (ret.get(i).getDenom() == 0.1){
                assertEquals(ret.get(i).getQuantity(),1);
            
            }else if (ret.get(i).getDenom() == 0.05){
                assertEquals(ret.get(i).getQuantity(),1);
            }
            i += 1;
        }
        

    }

    @Test
    void ProductReportTest(){
        Connection con = itemDao.getCon();
        String path = "src/test/resources/reports/ProductsReportTest.csv";
        itemDao.generateAvailableProductsReport(path);
        try {

            PreparedStatement ps= con.prepareStatement("SELECT * FROM Products");
            ResultSet rs = ps.executeQuery();

            File myObj = new File(path);
            Scanner myReader = new Scanner(myObj);
            String data = myReader.nextLine();
            assertEquals(data,"Code,Name,Price,Quantity,Category");

            // compares if the data in the report is consistent with the database
            while (rs.next()) {
                myReader.hasNextLine();
                data = myReader.nextLine();

                String code = rs.getString("Code");
                String productName = rs.getString("Name");
                String price = rs.getString("Price");
                String quantity = rs.getString("quantity");
                String category = rs.getString("category");
                 
                String line = String.format("%s,%s,%s,%s,%s",
                        code,productName,price,quantity,category);
                assertEquals(data,line);
                // break;
            }
            myReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        } catch (SQLException e) {
            System.out.println("Datababse error:");
            e.printStackTrace();
        }
    }

    @Test
    void UserReportTest(){
        Connection con = itemDao.getCon();
        String path = "src/test/resources/reports/UsersReportTest.csv";
        userDao.generateUsersReport(path);
        try {

            PreparedStatement ps= con.prepareStatement("SELECT * FROM Users");
            ResultSet rs = ps.executeQuery();

            File myObj = new File(path);
            Scanner myReader = new Scanner(myObj);
            String data = myReader.nextLine();
            assertEquals(data,"username,Role");

            // compares if the data in the report is consistent with the database
            while (rs.next()) {
                myReader.hasNextLine();
                data = myReader.nextLine();

                String username = rs.getString("username");
                String role = rs.getString("ROLE");
                String line = String.format("%s,%s",
                        username,role);

                assertEquals(data,line);
                // break;
            }
            myReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        } catch (SQLException e) {
            System.out.println("Datababse error:");
            e.printStackTrace();
        }
    }

    @Test
    void AvailableChangeReportTest(){
        Connection con = itemDao.getCon();
        String path = "src/test/resources/reports/AvailableChangeReportTest.csv";
        userDao.generateAvailableChangeReport(path);
        try {

            PreparedStatement ps= con.prepareStatement("SELECT * FROM Denomination");
            ResultSet rs = ps.executeQuery();

            File myObj = new File(path);
            Scanner myReader = new Scanner(myObj);
            String data = myReader.nextLine();
            assertEquals(data,"Change,Quantity");

            // compares if the data in the report is consistent with the database
            while (rs.next()) {
                myReader.hasNextLine();
                data = myReader.nextLine();

                String denom = rs.getString("Denomination");
                String quantity = rs.getString("quantity");
                String line = String.format("%s,%s",
                        denom,quantity);

                assertEquals(data,line);
                // break;
            }
            myReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        } catch (SQLException e) {
            System.out.println("Datababse error:");
            e.printStackTrace();
        }
    }

    @Test
    void creditCardCheckTest(){
        assertEquals(userDao.creditCardCheck("Marguerite","30831"),1);
        assertEquals(userDao.creditCardCheck("Liana","75183"),1);
        assertEquals(userDao.creditCardCheck("INVALUD","30831"),0);

    }

    @Test
    void testProductSoldReportGeneration() {
        String path = "src/test/resources/reports/ProductSoldReportTest.csv";
        ItemDao.generateProductsSoldReport(path);

        try {
            long mismatch = Files.mismatch(Path.of(path), Path.of("src/test/resources/Out/ProductsSold.csv"));
            assertEquals(-1, mismatch);
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
    @Test
    void testInsertToCancelledTableLoggedIn() {
        assertEquals(0, historyDao.count("Username", "CancelledTransactions"));
        HistoryDao.insertToCancelledTransactionTable("tom", "timeout");
        assertEquals(1, historyDao.count("Username", "CancelledTransactions"));
    }

    @Test
    void testInsertToCancelledTableNotLogged() {
        assertEquals(0, HistoryDao.count("Username", "CancelledTransactions"));
        HistoryDao.insertToCancelledTransactionTable("guest", "timeout");
        assertEquals(1, HistoryDao.count("Username", "CancelledTransactions"));
    }

    @Test
    void testCancelledTransactionSummaryEmpty() {
        String path = "src/test/resources/reports/CancelledTransactionSummary.csv";
        ItemDao.generateCancelledTransactionSummary(path);

        try {
            long mismatch = Files.mismatch(Path.of(path), Path.of("src/test/resources/Out/CancellationSummary.csv"));
            assertEquals(-1, mismatch);
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }

    @Test
    void testCancelledTransactionSummary() {
        String path = "src/test/resources/reports/CancelledTransactionSummary.csv";
        HistoryDao.insertToCancelledTransactionTable("guest", "timeout");
        ItemDao.generateCancelledTransactionSummary(path);
        //Cannot assert here because of time stamper
    }

    @Test
    void testProductSoldReportGenerationNotEmpty() {
        String path = "src/test/resources/reports/ProductSoldReportTest.csv";
        HistoryDao.insertToHistoryTable("4002", "Skittles", "1", "anonymous");
        ItemDao.generateProductsSoldReport(path);

        try {
            long mismatch = Files.mismatch(Path.of(path), Path.of("src/test/resources/Out/ProductsSoldNotEmpty.csv"));
            assertEquals(-1, mismatch);
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }

    @Test
    void testViewDrinks() {
        List<Item> drinks = ItemDao.viewDrinks();
        assertEquals(5, drinks.size());
        assertEquals(0, drinks.get(0).getCategory());
    }

    @Test
    void testViewChocolates() {
        List<Item> chocolates = ItemDao.viewChocolates();
        assertEquals(4, chocolates.size());
        assertEquals(1, chocolates.get(0).getCategory());
    }

    @Test
    void testViewChips() {

        List<Item> chips = ItemDao.viewChips();
        assertEquals(4, chips.size());
        assertEquals(2, chips.get(0).getCategory());
    }

    @Test
    void testViewCandies() {

        List<Item> candies = ItemDao.viewCandies();
        assertEquals(3, candies.size());
        assertEquals(3, candies.get(0).getCategory());
    }

    @Test
    void testViewUser() {
        User user = UserDao.viewUser("owner");
        assertEquals("owner", user.getName());
    }

    @Test
    void testSaveCardDetails() {
        User user = UserDao.viewUser("owner");
        assertEquals("", user.getCardName());

        UserDao.saveCardDetails("owner", "OwnersCard", "12345");
        User newUser = UserDao.viewUser("owner");
        assertEquals("OwnersCard", newUser.getCardName());
    }

    @Test
    void testTransactionSummary() {
        String path = "src/test/resources/reports/TransactionSummary.csv";
        HistoryDao.insertToTransactionTable("4002", 3.0, 0.5, "Cash");
        DenomDao.generateTransactionsSummary(path);

        //Cant test output because of time stamper
    }

    @Test
    void testCashSummary() {
        String path = "src/test/resources/reports/CashSummary.csv";
        DenomDao.generateCashSummary(path);

        try {
            long mismatch = Files.mismatch(Path.of(path), Path.of("src/test/resources/Out/CashSummary.csv"));
            assertEquals(-1, mismatch);
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }

    @Test
    void testUpdateProduct() {
        List<Item> items = ItemDao.viewDrinks();
        for (Item item : items) {
            if (item.getCode() == 1001) {
                assertEquals("Sprite", item.getName());
            }
        }
        Item item = new Item();
        item.setCode(1001);
        item.setName("coke");
        item.setCategory(0);
        item.setQty(4);
        item.setPrice(1.5);

        ItemDao.updateProduct(1001, item);
        items = ItemDao.viewDrinks();
        for (Item item1 : items) {
            if (item1.getCode() == 1001) {
                assertEquals("coke", item.getName());
            }
        }
    }

    @Test
    void testCheckPassword() {
        assertTrue(UserDao.checkIfPasswordMatchesUsername("owner", "owner"));
    }

    // @Test
    // void testRole() {
    //     User user = UserDao.viewUser("seller");
    //     assertEquals("seller", user.getRole());
    //     UserDao.removeRole("seller");
    //     user = UserDao.viewUser("seller");
    //     assertEquals("customer", user.getRole());
    // }

}
    